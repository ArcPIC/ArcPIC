#Makefile for ArcPic2D
#
# How to run ArcPic2D:
# User needs to create the some folder $WORK on a scratch disk, copy input.txt, src/, and h/ to this folder,
# and create folders $WORK/xsct and $WORK/out.
#
# After this, edit $WORK/src/Makefile. Make sure $WORK points to the folder created above,
# and SuperLUroot is where to find SuperLU. Then run "make c" (clean), "make d" (depend),
# and finally "make e" (executable) in the source directory.
#
# $WORK should now contain a executable "ArcPIC_$RUNNAME", where $RUNNAME is the bottommost
# folder in $WORK (see Makefile).
# On Hippu, run this as "./ArcPIC_$RUNNAME > readme.out".
# The program will start in the background, writing its output to "readme.out".
# User may see what is written to stdout using "cat", "tail" etc,
# or "logout" to log out while the program is running.
# IMPORTANT: Remember which Hippu node you started the job on (e.g. hippu1, hippu2, etc.)!
#
# If you want to run ArcPic2D with a debugger, change CFLAGS so that optimization is OFF (-O0) and no -march
# and debugging symbols are included (-g). Also make sure the same are true for SuperLU.
#

RUNNAME = test                        #MAKERUNDIR modifies this (magic comment, don't modify!)

WORK = $(HOME)/tmp/arcpic/$(RUNNAME)/ #MAKERUNDIR modifies this (magic comment, don't modify!)

OBJECTS =	init.o \
		engy.o \
		phi.o \
		push.o \
		efield.o \
		density.o \
		e_ion.o \
		my_mem.o \
		my_time.o \
		moms.o\
		aver.o \
		filenames.o \
		outputz.o \
		random.o \
		collisions.o \
		order.o \
		input.o \
		vdf.o \
		backup.o \
		print_par.o \
		checkbounds.o \
		circuit.o \
		arcbounds.o \
		arcbound_original.o \
		arcbound_original_newheatspike.o \
		arcbound_flexFN.o \
		arcbound_flexFN_origNeutrals.o \
		arcbound_flexFN2.o \
		arcbound_flexFN2_tableNeutrals.o \
		arcbound_sumTipFNField.o \
		initialParticles.o \
		weightPotential.o
MAIN =          main.o 
SUPPORTroot     = $(HOME)/PhD/arcpic/support/pic2d/trunk #MAKERUNDIR modifies this (magic comment, don't modify!)
SuperLUroot     = $(SUPPORTroot)/SuperLU_4.2
#SuperLUroot     = $(SUPPORTroot)/SuperLU_4.0 ###DEBUG
ATLASroot       = $(SUPPORTroot)/ATLAS-3.10.0/ATLAS
SuperLUlib   	= -L$(SuperLUroot)/lib -lsuperlu
#SuperLUlib      = -L$(SuperLUroot)/lib -lsuperlu_4.0 -lblas                                           ### DEBUG
BLASlib   	= -L$(ATLASroot)/lib -lf77blas -latlas                                                 ### ATLAS BLAS
#BLASlib         = -L$(MKLROOT)/lib/intel64 -lmkl_intel_lp64 -lmkl_sequential -lmkl_core -lpthread -lm ### Hippu 3/4 BLAS (Intel MKL)
LIBS		= $(SuperLUlib) $(BLASlib) -lgsl -lgslcblas -fopenmp


CFLAGS  = -O2 -march=native -I../h -I$(SuperLUroot)/SRC -Wall -fopenmp                   ### ATLAS BLAS
#CFLAGS  = -O2 -march=native -I../h -m64 -I$(MKLROOT)/include -Wall -I$(SuperLUroot)/SRC ### Hippu 3/4 BLAS (Intel MKL)
#CFLAGS  = -g -I../h -I$(SuperLUroot)/SRC/ -Wall                                         ### DEBUG
LDFLAGS = -O2 -march=native ### NORMAL
#LDFLAGS = -g               ### DEBUG
DFLAGS  = -I../h -I$(SuperLUroot)/SRC/

COMPILE = g++ -c  $(CFLAGS)
LINK    = g++ -lm $(LDFLAGS)

.PHONY : c co d e tests

e:	$(OBJECTS) $(MAIN)
	$(LINK) -o $(WORK)ArcPIC_$(RUNNAME)  $(OBJECTS) $(MAIN) $(LIBS) 

tests: colltest rngtest rngparatest picFieldTest

colltest: collisions.o colltest.o rng64.o
	$(LINK) -o $(WORK)tests/colltest collisions.o colltest.o rng64.o $(LIBS)
rngtest: rngtest.o random.o #rng64.o
	$(LINK) -o $(WORK)tests/rngtest rngtest.o random.o $(LIBS)
rngparatest: rngparatest.o random.o
	$(LINK) -o $(WORK)tests/rngparatest rngparatest.o random.o $(LIBS)
#This one NOT saved in tests, as it uses standard input & output routines
picFieldTest: picFieldTest.o $(OBJECTS)
	$(LINK) -o $(WORK)picFieldTest picFieldTest.o $(OBJECTS) $(LIBS)


split:	$(OBJECTS) $(MAIN)
	$(LINK) -o $(WORK)$@X10.exe  $(OBJECTS) $(MAIN)

#depend:
d:
	gccmakedep $(OPTS) $(DFLAGS) *.cpp

#clean:
c:
	rm -f *.o
#Clean output
co:
	rm -f ../out/* ../xsct/* ../error.log ../circuit.dat ../arcbounds.dat ../mainStats.dat  ../LOCKFILE
	-rm -f ../arcbounds_original.dat

%.o: %.cpp
	$(COMPILE) -o $*.o $*.cpp


# Below this comment section (last line is a keyword) is autogenerated stuff from gccmakedep / makedepend.
# Don't touch it, it is regenerated every time gccmakedep is run.
# Plese delete everything below "DO NOT DELETE" before checking into the repository (its just autogenerated "noise" anyway).
# DO NOT DELETE
